"""
Django settings for StackIt project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import cloudinary
from datetime import timedelta
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOG_DIR = os.path.join(BASE_DIR, 'logs')
REQUEST_LOG_DIR = os.path.join(LOG_DIR, 'requests')

# Ensure log directories exist
os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(REQUEST_LOG_DIR, exist_ok=True)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = []

PROD = not DEBUG

SITE_URL = os.getenv('SITE_URL', 'http://localhost:8000')

AUTH_USER_MODEL = 'account.User'

# Application definition
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        "rest_framework.authentication.SessionAuthentication",
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    # 'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # drf-spectacular settings
    'EXCEPTION_HANDLER': 'MedAudit.exception_handler.custom_exception_handler',
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7), 
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',

    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "cloudinary_storage",  # Must come before django.contrib.staticfiles
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "rest_framework_simplejwt",
    "cloudinary",
    
    # Custom apps
    "account",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "StackIt.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "StackIt.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",

        "NAME": os.getenv('DB_NAME'),
        "USER": os.getenv('DB_USER'),
        "PASSWORD": os.getenv('DB_PASSWORD'),
        "HOST": os.getenv('DB_HOST', 'localhost'),
        "PORT": "5432",
        "OPTIONS": {
            "sslmode": "require",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Celery settings
CELERY_BROKER_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes

# OpenAI API settings
# OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
# OPENAI_MODEL_NAME = os.getenv('OPENAI_MODEL_NAME', 'gpt-4-turbo-preview')

# Gemini API settings
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY', '')
GOOGLE_MODEL_NAME = os.getenv('GOOGLE_MODEL_NAME', 'gemini-2.0-flash')


# Increase data upload limits for large medical files (set to 100MB)
DATA_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB in bytes
FILE_UPLOAD_MAX_MEMORY_SIZE = 104857600  # 100MB in bytes

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Cloudinary settings for media files
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET'),
    'SECURE': True,
    'MEDIA_TAG': 'media',
    'INVALID_VIDEO_ERROR_MESSAGE': 'Invalid video file',
    'INVALID_IMAGE_ERROR_MESSAGE': 'Invalid image file',
    'RESOURCE_TYPES': {
        'raw': ['.pdf', '.doc', '.docx', '.rtf', '.txt', '.xls', 
                '.xlsx', '.ppt', '.pptx', '.odt', '.odp', '.ods', 
                '.csv', '.json', '.yaml', '.yml', '.xml', '.html', 
                '.htm', '.md', '.zip', '.rar', '.7z', '.tar', '.gz', 
                '.bz2', '.mp4', '.mov', '.avi', '.wmv', '.flv', '.mpg', 
                '.mpeg', '.m4v', '.3gp', '.webm'],
        'image': ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.svg', '.webp'],
    },
    # Added settings for larger file uploads
    'MAGIC_FILE_PATH': None,
    'PREFIX': 'medaudit',
    'MAX_SIZE': 100 * 1024 * 1024,  # 100MB in bytes
    'CHUNK_SIZE': 10 * 1024 * 1024,  # 10MB chunks for large file uploads
}

# Use Cloudinary's RawMediaCloudinaryStorage for raw files like PDFs
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.RawMediaCloudinaryStorage'

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'filters': {
#         'request_context': {
#             '()': 'MedAudit.logging_middleware.RequestContextFilter',
#         },
#         'exclude_autoreload': {
#             '()': 'MedAudit.logging_middleware.ExcludeAutoreloadFilter',
#         },
#     },
#     'formatters': {
#         'json': {
#             '()': 'pythonjsonlogger.json.JsonFormatter',
#             'format': '%(levelname)s %(asctime)s %(module)s %(message)s %(name)s %(process)d %(thread)d %(ip)s %(user_agent)s %(user_id)s %(username)s %(request_id)s %(type)s %(path)s %(status_code)d %(content_length)d',
#             'json_ensure_ascii': False,
#             'json_indent': None,
#         },
#         'verbose': {
#             'format': '%(levelname)s [%(asctime)s] %(name)s - %(module)s.%(funcName)s:%(lineno)d - %(message)s',
#             'datefmt': '%Y-%m-%d %H:%M:%S',
#         },
#         'simple': {
#             'format': '%(levelname)s [%(asctime)s] %(message)s',
#             'datefmt': '%Y-%m-%d %H:%M:%S',
#         },
#         'request': {
#             'format': '%(levelname)s [%(asctime)s] %(request_id)s %(username)s - %(message)s',
#             'datefmt': '%Y-%m-%d %H:%M:%S',
#         },
#     },
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple' if not PROD else 'json',
#             'filters': ['request_context', 'exclude_autoreload'],
#         },
#         'file': {
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(LOG_DIR, 'app.log'),
#             'formatter': 'verbose' if not PROD else 'json',
#             'filters': ['request_context', 'exclude_autoreload'],
#             'maxBytes': 100 * 1024 * 1024, # 100 MB
#             'backupCount': 10,
#             'delay': True,  # Add this to prevent immediate file creation
#         },
#         'request_file': {
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': os.path.join(REQUEST_LOG_DIR, 'requests.log'),
#             'formatter': 'request' if not PROD else 'json',
#             'filters': ['request_context', 'exclude_autoreload'],
#             'maxBytes': 100 * 1024 * 1024, # 100 MB
#             'backupCount': 5,
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console', 'file'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         'django.db.backends': {
#             'level': 'DEBUG' if DEBUG else 'INFO',
#             'handlers': ['file'],
#             'propagate': False,
#         },
#         'django.request': {
#             'handlers': ['request_file'],
#             'level': 'INFO',
#             'propagate': False,
#         },
#         'referral': {  # Add app-specific logger for referral app
#             'handlers': ['console', 'file'],
#             'level': 'DEBUG' if not PROD else 'INFO',
#             'propagate': False,
#         },
#     },
#     'root': {
#         'handlers': ['console', 'file'],
#         'level': 'DEBUG' if not PROD else 'INFO',
#     },
# }
